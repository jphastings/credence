// Code generated by protoc-gen-go.
// source: search_result.proto
// DO NOT EDIT!

package credence

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// A List of the keys searched for and the breakdown of Credence'd
// belief of the various creds underneath them
type SearchResult struct {
	Results []*SearchResult_KeyBreakdown `protobuf:"bytes,1,rep,name=results" json:"results,omitempty"`
}

func (m *SearchResult) Reset()                    { *m = SearchResult{} }
func (m *SearchResult) String() string            { return proto.CompactTextString(m) }
func (*SearchResult) ProtoMessage()               {}
func (*SearchResult) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{0} }

func (m *SearchResult) GetResults() []*SearchResult_KeyBreakdown {
	if m != nil {
		return m.Results
	}
	return nil
}

type SearchResult_AssertionBreakdown struct {
	NoComment   float32 `protobuf:"fixed32,1,opt,name=no_comment" json:"no_comment,omitempty"`
	IsTrue      float32 `protobuf:"fixed32,2,opt,name=is_true" json:"is_true,omitempty"`
	IsFalse     float32 `protobuf:"fixed32,3,opt,name=is_false" json:"is_false,omitempty"`
	IsAmbiguous float32 `protobuf:"fixed32,4,opt,name=is_ambiguous" json:"is_ambiguous,omitempty"`
	// TODO: include this directly from cred?
	//
	// Types that are valid to be assigned to Statement:
	//	*SearchResult_AssertionBreakdown_HumanReadable
	//	*SearchResult_AssertionBreakdown_CredSeen
	//	*SearchResult_AssertionBreakdown_ApplicationSpecific
	//	*SearchResult_AssertionBreakdown_IdentityDeclaration
	Statement isSearchResult_AssertionBreakdown_Statement `protobuf_oneof:"statement"`
}

func (m *SearchResult_AssertionBreakdown) Reset()         { *m = SearchResult_AssertionBreakdown{} }
func (m *SearchResult_AssertionBreakdown) String() string { return proto.CompactTextString(m) }
func (*SearchResult_AssertionBreakdown) ProtoMessage()    {}
func (*SearchResult_AssertionBreakdown) Descriptor() ([]byte, []int) {
	return fileDescriptor3, []int{0, 0}
}

type isSearchResult_AssertionBreakdown_Statement interface {
	isSearchResult_AssertionBreakdown_Statement()
}

type SearchResult_AssertionBreakdown_HumanReadable struct {
	HumanReadable *Cred_HumanReadableStatement `protobuf:"bytes,6,opt,name=human_readable,oneof"`
}
type SearchResult_AssertionBreakdown_CredSeen struct {
	CredSeen *Cred_CredSeenStatement `protobuf:"bytes,7,opt,name=cred_seen,oneof"`
}
type SearchResult_AssertionBreakdown_ApplicationSpecific struct {
	ApplicationSpecific *Cred_ApplicationSpecificStatement `protobuf:"bytes,8,opt,name=application_specific,oneof"`
}
type SearchResult_AssertionBreakdown_IdentityDeclaration struct {
	IdentityDeclaration *Cred_IdentityDeclarationStatement `protobuf:"bytes,9,opt,name=identity_declaration,oneof"`
}

func (*SearchResult_AssertionBreakdown_HumanReadable) isSearchResult_AssertionBreakdown_Statement() {}
func (*SearchResult_AssertionBreakdown_CredSeen) isSearchResult_AssertionBreakdown_Statement()      {}
func (*SearchResult_AssertionBreakdown_ApplicationSpecific) isSearchResult_AssertionBreakdown_Statement() {
}
func (*SearchResult_AssertionBreakdown_IdentityDeclaration) isSearchResult_AssertionBreakdown_Statement() {
}

func (m *SearchResult_AssertionBreakdown) GetStatement() isSearchResult_AssertionBreakdown_Statement {
	if m != nil {
		return m.Statement
	}
	return nil
}

func (m *SearchResult_AssertionBreakdown) GetHumanReadable() *Cred_HumanReadableStatement {
	if x, ok := m.GetStatement().(*SearchResult_AssertionBreakdown_HumanReadable); ok {
		return x.HumanReadable
	}
	return nil
}

func (m *SearchResult_AssertionBreakdown) GetCredSeen() *Cred_CredSeenStatement {
	if x, ok := m.GetStatement().(*SearchResult_AssertionBreakdown_CredSeen); ok {
		return x.CredSeen
	}
	return nil
}

func (m *SearchResult_AssertionBreakdown) GetApplicationSpecific() *Cred_ApplicationSpecificStatement {
	if x, ok := m.GetStatement().(*SearchResult_AssertionBreakdown_ApplicationSpecific); ok {
		return x.ApplicationSpecific
	}
	return nil
}

func (m *SearchResult_AssertionBreakdown) GetIdentityDeclaration() *Cred_IdentityDeclarationStatement {
	if x, ok := m.GetStatement().(*SearchResult_AssertionBreakdown_IdentityDeclaration); ok {
		return x.IdentityDeclaration
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*SearchResult_AssertionBreakdown) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _SearchResult_AssertionBreakdown_OneofMarshaler, _SearchResult_AssertionBreakdown_OneofUnmarshaler, _SearchResult_AssertionBreakdown_OneofSizer, []interface{}{
		(*SearchResult_AssertionBreakdown_HumanReadable)(nil),
		(*SearchResult_AssertionBreakdown_CredSeen)(nil),
		(*SearchResult_AssertionBreakdown_ApplicationSpecific)(nil),
		(*SearchResult_AssertionBreakdown_IdentityDeclaration)(nil),
	}
}

func _SearchResult_AssertionBreakdown_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*SearchResult_AssertionBreakdown)
	// statement
	switch x := m.Statement.(type) {
	case *SearchResult_AssertionBreakdown_HumanReadable:
		b.EncodeVarint(6<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.HumanReadable); err != nil {
			return err
		}
	case *SearchResult_AssertionBreakdown_CredSeen:
		b.EncodeVarint(7<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.CredSeen); err != nil {
			return err
		}
	case *SearchResult_AssertionBreakdown_ApplicationSpecific:
		b.EncodeVarint(8<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.ApplicationSpecific); err != nil {
			return err
		}
	case *SearchResult_AssertionBreakdown_IdentityDeclaration:
		b.EncodeVarint(9<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.IdentityDeclaration); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("SearchResult_AssertionBreakdown.Statement has unexpected type %T", x)
	}
	return nil
}

func _SearchResult_AssertionBreakdown_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*SearchResult_AssertionBreakdown)
	switch tag {
	case 6: // statement.human_readable
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Cred_HumanReadableStatement)
		err := b.DecodeMessage(msg)
		m.Statement = &SearchResult_AssertionBreakdown_HumanReadable{msg}
		return true, err
	case 7: // statement.cred_seen
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Cred_CredSeenStatement)
		err := b.DecodeMessage(msg)
		m.Statement = &SearchResult_AssertionBreakdown_CredSeen{msg}
		return true, err
	case 8: // statement.application_specific
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Cred_ApplicationSpecificStatement)
		err := b.DecodeMessage(msg)
		m.Statement = &SearchResult_AssertionBreakdown_ApplicationSpecific{msg}
		return true, err
	case 9: // statement.identity_declaration
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Cred_IdentityDeclarationStatement)
		err := b.DecodeMessage(msg)
		m.Statement = &SearchResult_AssertionBreakdown_IdentityDeclaration{msg}
		return true, err
	default:
		return false, nil
	}
}

func _SearchResult_AssertionBreakdown_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*SearchResult_AssertionBreakdown)
	// statement
	switch x := m.Statement.(type) {
	case *SearchResult_AssertionBreakdown_HumanReadable:
		s := proto.Size(x.HumanReadable)
		n += proto.SizeVarint(6<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *SearchResult_AssertionBreakdown_CredSeen:
		s := proto.Size(x.CredSeen)
		n += proto.SizeVarint(7<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *SearchResult_AssertionBreakdown_ApplicationSpecific:
		s := proto.Size(x.ApplicationSpecific)
		n += proto.SizeVarint(8<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *SearchResult_AssertionBreakdown_IdentityDeclaration:
		s := proto.Size(x.IdentityDeclaration)
		n += proto.SizeVarint(9<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type SearchResult_KeyBreakdown struct {
	Key        string                             `protobuf:"bytes,1,opt,name=key" json:"key,omitempty"`
	Assertions []*SearchResult_AssertionBreakdown `protobuf:"bytes,2,rep,name=assertions" json:"assertions,omitempty"`
}

func (m *SearchResult_KeyBreakdown) Reset()                    { *m = SearchResult_KeyBreakdown{} }
func (m *SearchResult_KeyBreakdown) String() string            { return proto.CompactTextString(m) }
func (*SearchResult_KeyBreakdown) ProtoMessage()               {}
func (*SearchResult_KeyBreakdown) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{0, 1} }

func (m *SearchResult_KeyBreakdown) GetAssertions() []*SearchResult_AssertionBreakdown {
	if m != nil {
		return m.Assertions
	}
	return nil
}

func init() {
	proto.RegisterType((*SearchResult)(nil), "credence.SearchResult")
	proto.RegisterType((*SearchResult_AssertionBreakdown)(nil), "credence.SearchResult.AssertionBreakdown")
	proto.RegisterType((*SearchResult_KeyBreakdown)(nil), "credence.SearchResult.KeyBreakdown")
}

var fileDescriptor3 = []byte{
	// 348 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x74, 0x92, 0x4f, 0x4f, 0xea, 0x40,
	0x14, 0xc5, 0x1f, 0x94, 0x00, 0xbd, 0x25, 0xef, 0xbd, 0x8c, 0x2c, 0x26, 0xac, 0x88, 0xc6, 0x04,
	0x63, 0xd2, 0x05, 0xea, 0xd2, 0x18, 0xd0, 0x05, 0x86, 0x1d, 0xdd, 0xb9, 0x69, 0x86, 0xe9, 0x45,
	0x26, 0xf4, 0x5f, 0x66, 0xa6, 0x31, 0xec, 0xfc, 0x2e, 0x7e, 0x51, 0x67, 0x06, 0x90, 0x06, 0x75,
	0xd3, 0xb4, 0xa7, 0xbf, 0x73, 0xda, 0x7b, 0xcf, 0xc0, 0x99, 0x42, 0x26, 0xf9, 0x3a, 0x96, 0xa8,
	0xaa, 0x54, 0x87, 0xa5, 0x2c, 0x74, 0x41, 0xba, 0x5c, 0x62, 0x82, 0x39, 0xc7, 0x01, 0xd8, 0xbb,
	0x9d, 0x7a, 0xfe, 0xd1, 0x82, 0x5e, 0xe4, 0xe8, 0x85, 0x83, 0xc9, 0x2d, 0x74, 0x76, 0x36, 0x45,
	0x1b, 0x43, 0x6f, 0x14, 0x8c, 0x2f, 0xc2, 0x83, 0x31, 0xac, 0x83, 0xe1, 0x1c, 0xb7, 0x53, 0x89,
	0x6c, 0x93, 0x14, 0x6f, 0xf9, 0xe0, 0xdd, 0x03, 0x32, 0x51, 0x0a, 0xa5, 0x16, 0x45, 0xfe, 0x25,
	0x13, 0x02, 0x90, 0x17, 0x31, 0x2f, 0xb2, 0x0c, 0x73, 0x6d, 0xf2, 0x1a, 0xa3, 0x26, 0xf9, 0x07,
	0x1d, 0xa1, 0x62, 0x2d, 0x2b, 0xa4, 0x4d, 0x27, 0xfc, 0x87, 0xae, 0x11, 0x56, 0x2c, 0x55, 0x48,
	0x3d, 0xa7, 0xf4, 0xa1, 0x67, 0x14, 0x96, 0x2d, 0xc5, 0x6b, 0x55, 0x54, 0x8a, 0xb6, 0x9c, 0xfa,
	0x00, 0x7f, 0xd7, 0x55, 0xc6, 0x72, 0x33, 0x16, 0x4b, 0xd8, 0x32, 0x45, 0xda, 0x36, 0x7a, 0x30,
	0xbe, 0x3c, 0xfe, 0xe0, 0xa3, 0x1d, 0x6c, 0x66, 0xa1, 0xc5, 0x9e, 0x89, 0x34, 0xd3, 0x68, 0xbf,
	0x3e, 0xfb, 0x43, 0xee, 0xc0, 0xb7, 0x64, 0xac, 0x10, 0x73, 0xda, 0x71, 0xde, 0xe1, 0x89, 0xd7,
	0x5e, 0x22, 0xf3, 0xba, 0x6e, 0x9b, 0x43, 0x9f, 0x95, 0x65, 0x2a, 0x38, 0xb3, 0xc3, 0xc5, 0xaa,
	0x44, 0x2e, 0x56, 0x82, 0xd3, 0xae, 0x4b, 0xb8, 0x3e, 0x49, 0x98, 0x1c, 0xd1, 0x68, 0x4f, 0x9e,
	0x84, 0x09, 0x43, 0x6b, 0xa1, 0xb7, 0x71, 0x82, 0x3c, 0x65, 0xd2, 0xa1, 0xd4, 0xff, 0x31, 0xec,
	0x79, 0x8f, 0x3e, 0x1d, 0xc9, 0x5a, 0xd8, 0x34, 0x00, 0x5f, 0x1d, 0x1e, 0x07, 0x2f, 0xd0, 0xab,
	0x57, 0x42, 0x02, 0xf0, 0x36, 0xb8, 0x75, 0x4b, 0xf7, 0xc9, 0x3d, 0x00, 0x3b, 0xd4, 0xa3, 0xcc,
	0xde, 0x6d, 0xb1, 0x57, 0xbf, 0x14, 0xfb, 0xbd, 0xc7, 0x65, 0xdb, 0x1d, 0x96, 0x9b, 0xcf, 0x00,
	0x00, 0x00, 0xff, 0xff, 0xbb, 0xa6, 0x4c, 0xf9, 0x59, 0x02, 0x00, 0x00,
}
