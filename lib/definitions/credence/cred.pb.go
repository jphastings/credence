// Code generated by protoc-gen-go.
// source: cred.proto
// DO NOT EDIT!

/*
Package credence is a generated protocol buffer package.

It is generated from these files:
	cred.proto
	message.proto
	search_request.proto
	search_result.proto

It has these top-level messages:
	Cred
	Message
	SearchRequest
	SearchResult
*/
package credence

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type Cred_AssertionType int32

const (
	Cred_NO_COMMENT   Cred_AssertionType = 0
	Cred_IS_TRUE      Cred_AssertionType = 1
	Cred_IS_FALSE     Cred_AssertionType = 2
	Cred_IS_AMBIGUOUS Cred_AssertionType = 3
)

var Cred_AssertionType_name = map[int32]string{
	0: "NO_COMMENT",
	1: "IS_TRUE",
	2: "IS_FALSE",
	3: "IS_AMBIGUOUS",
}
var Cred_AssertionType_value = map[string]int32{
	"NO_COMMENT":   0,
	"IS_TRUE":      1,
	"IS_FALSE":     2,
	"IS_AMBIGUOUS": 3,
}

func (x Cred_AssertionType) String() string {
	return proto.EnumName(Cred_AssertionType_name, int32(x))
}
func (Cred_AssertionType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0, 0} }

// A cred is a definition of a statement, and a timestamped
// assertion as to whether the author believes it to be
// factually correct, incorrect, ambiguous or something
// explicitly worth not commenting on.
type Cred struct {
	// A list of keys that should be indexed for search so this cred can be found
	Keys []string `protobuf:"bytes,1,rep,name=keys" json:"keys,omitempty"`
	// UNIX epoch of the time this cred was created
	Timestamp int64 `protobuf:"varint,2,opt,name=timestamp" json:"timestamp,omitempty"`
	// Whether we are asserting the statement is true, false, ambiguous or we're making a null assertion.
	Assertion Cred_AssertionType `protobuf:"varint,3,opt,name=assertion,enum=credence.Cred_AssertionType" json:"assertion,omitempty"`
	// An optional URI which the author claims proves the assertion as to the statement.
	ProofUri string `protobuf:"bytes,4,opt,name=proof_uri" json:"proof_uri,omitempty"`
	// The DSA Signature of this protobuf encoded cred (while signature is set to empty string)
	Signature []byte `protobuf:"bytes,5,opt,name=signature,proto3" json:"signature,omitempty"`
	// No statement is the equivalent of an "I exist"
	// which could be false (if your private key is compomised)
	// or no comment which is the equivalent of a cred no-op.
	//
	// Types that are valid to be assigned to Statement:
	//	*Cred_HumanReadable
	//	*Cred_CredSeen
	//	*Cred_ApplicationSpecific
	//	*Cred_IdentityDeclaration
	Statement isCred_Statement `protobuf_oneof:"statement"`
}

func (m *Cred) Reset()                    { *m = Cred{} }
func (m *Cred) String() string            { return proto.CompactTextString(m) }
func (*Cred) ProtoMessage()               {}
func (*Cred) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type isCred_Statement interface {
	isCred_Statement()
}

type Cred_HumanReadable struct {
	HumanReadable *Cred_HumanReadableStatement `protobuf:"bytes,6,opt,name=human_readable,oneof"`
}
type Cred_CredSeen struct {
	CredSeen *Cred_CredSeenStatement `protobuf:"bytes,7,opt,name=cred_seen,oneof"`
}
type Cred_ApplicationSpecific struct {
	ApplicationSpecific *Cred_ApplicationSpecificStatement `protobuf:"bytes,8,opt,name=application_specific,oneof"`
}
type Cred_IdentityDeclaration struct {
	IdentityDeclaration *Cred_IdentityDeclarationStatement `protobuf:"bytes,9,opt,name=identity_declaration,oneof"`
}

func (*Cred_HumanReadable) isCred_Statement()       {}
func (*Cred_CredSeen) isCred_Statement()            {}
func (*Cred_ApplicationSpecific) isCred_Statement() {}
func (*Cred_IdentityDeclaration) isCred_Statement() {}

func (m *Cred) GetStatement() isCred_Statement {
	if m != nil {
		return m.Statement
	}
	return nil
}

func (m *Cred) GetHumanReadable() *Cred_HumanReadableStatement {
	if x, ok := m.GetStatement().(*Cred_HumanReadable); ok {
		return x.HumanReadable
	}
	return nil
}

func (m *Cred) GetCredSeen() *Cred_CredSeenStatement {
	if x, ok := m.GetStatement().(*Cred_CredSeen); ok {
		return x.CredSeen
	}
	return nil
}

func (m *Cred) GetApplicationSpecific() *Cred_ApplicationSpecificStatement {
	if x, ok := m.GetStatement().(*Cred_ApplicationSpecific); ok {
		return x.ApplicationSpecific
	}
	return nil
}

func (m *Cred) GetIdentityDeclaration() *Cred_IdentityDeclarationStatement {
	if x, ok := m.GetStatement().(*Cred_IdentityDeclaration); ok {
		return x.IdentityDeclaration
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*Cred) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _Cred_OneofMarshaler, _Cred_OneofUnmarshaler, _Cred_OneofSizer, []interface{}{
		(*Cred_HumanReadable)(nil),
		(*Cred_CredSeen)(nil),
		(*Cred_ApplicationSpecific)(nil),
		(*Cred_IdentityDeclaration)(nil),
	}
}

func _Cred_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*Cred)
	// statement
	switch x := m.Statement.(type) {
	case *Cred_HumanReadable:
		b.EncodeVarint(6<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.HumanReadable); err != nil {
			return err
		}
	case *Cred_CredSeen:
		b.EncodeVarint(7<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.CredSeen); err != nil {
			return err
		}
	case *Cred_ApplicationSpecific:
		b.EncodeVarint(8<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.ApplicationSpecific); err != nil {
			return err
		}
	case *Cred_IdentityDeclaration:
		b.EncodeVarint(9<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.IdentityDeclaration); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("Cred.Statement has unexpected type %T", x)
	}
	return nil
}

func _Cred_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*Cred)
	switch tag {
	case 6: // statement.human_readable
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Cred_HumanReadableStatement)
		err := b.DecodeMessage(msg)
		m.Statement = &Cred_HumanReadable{msg}
		return true, err
	case 7: // statement.cred_seen
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Cred_CredSeenStatement)
		err := b.DecodeMessage(msg)
		m.Statement = &Cred_CredSeen{msg}
		return true, err
	case 8: // statement.application_specific
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Cred_ApplicationSpecificStatement)
		err := b.DecodeMessage(msg)
		m.Statement = &Cred_ApplicationSpecific{msg}
		return true, err
	case 9: // statement.identity_declaration
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Cred_IdentityDeclarationStatement)
		err := b.DecodeMessage(msg)
		m.Statement = &Cred_IdentityDeclaration{msg}
		return true, err
	default:
		return false, nil
	}
}

func _Cred_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*Cred)
	// statement
	switch x := m.Statement.(type) {
	case *Cred_HumanReadable:
		s := proto.Size(x.HumanReadable)
		n += proto.SizeVarint(6<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Cred_CredSeen:
		s := proto.Size(x.CredSeen)
		n += proto.SizeVarint(7<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Cred_ApplicationSpecific:
		s := proto.Size(x.ApplicationSpecific)
		n += proto.SizeVarint(8<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Cred_IdentityDeclaration:
		s := proto.Size(x.IdentityDeclaration)
		n += proto.SizeVarint(9<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type Cred_HumanReadableStatement struct {
	Statement string `protobuf:"bytes,1,opt,name=statement" json:"statement,omitempty"`
}

func (m *Cred_HumanReadableStatement) Reset()                    { *m = Cred_HumanReadableStatement{} }
func (m *Cred_HumanReadableStatement) String() string            { return proto.CompactTextString(m) }
func (*Cred_HumanReadableStatement) ProtoMessage()               {}
func (*Cred_HumanReadableStatement) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0, 0} }

type Cred_CredSeenStatement struct {
	CredHash string `protobuf:"bytes,1,opt,name=cred_hash" json:"cred_hash,omitempty"`
}

func (m *Cred_CredSeenStatement) Reset()                    { *m = Cred_CredSeenStatement{} }
func (m *Cred_CredSeenStatement) String() string            { return proto.CompactTextString(m) }
func (*Cred_CredSeenStatement) ProtoMessage()               {}
func (*Cred_CredSeenStatement) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0, 1} }

type Cred_ApplicationSpecificStatement struct {
	Statement []byte `protobuf:"bytes,1,opt,name=statement,proto3" json:"statement,omitempty"`
	// A URI which can be used to determine what application created the statement
	ApplicationUri string `protobuf:"bytes,2,opt,name=application_uri" json:"application_uri,omitempty"`
}

func (m *Cred_ApplicationSpecificStatement) Reset()         { *m = Cred_ApplicationSpecificStatement{} }
func (m *Cred_ApplicationSpecificStatement) String() string { return proto.CompactTextString(m) }
func (*Cred_ApplicationSpecificStatement) ProtoMessage()    {}
func (*Cred_ApplicationSpecificStatement) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{0, 2}
}

type Cred_IdentityDeclarationStatement struct {
	// A public key in DER format which can be used to check the
	// signature of this message to confirm it's veracity
	PublicKey []byte `protobuf:"bytes,1,opt,name=public_key,proto3" json:"public_key,omitempty"`
	// The identity being referenced eg. the URI for a twitter handle
	IdentityUri string `protobuf:"bytes,2,opt,name=identity_uri" json:"identity_uri,omitempty"`
}

func (m *Cred_IdentityDeclarationStatement) Reset()         { *m = Cred_IdentityDeclarationStatement{} }
func (m *Cred_IdentityDeclarationStatement) String() string { return proto.CompactTextString(m) }
func (*Cred_IdentityDeclarationStatement) ProtoMessage()    {}
func (*Cred_IdentityDeclarationStatement) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{0, 3}
}

func init() {
	proto.RegisterType((*Cred)(nil), "credence.Cred")
	proto.RegisterType((*Cred_HumanReadableStatement)(nil), "credence.Cred.HumanReadableStatement")
	proto.RegisterType((*Cred_CredSeenStatement)(nil), "credence.Cred.CredSeenStatement")
	proto.RegisterType((*Cred_ApplicationSpecificStatement)(nil), "credence.Cred.ApplicationSpecificStatement")
	proto.RegisterType((*Cred_IdentityDeclarationStatement)(nil), "credence.Cred.IdentityDeclarationStatement")
	proto.RegisterEnum("credence.Cred_AssertionType", Cred_AssertionType_name, Cred_AssertionType_value)
}

var fileDescriptor0 = []byte{
	// 413 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x7c, 0x92, 0x5f, 0x6f, 0xda, 0x30,
	0x10, 0xc0, 0x0b, 0xa1, 0x2d, 0x39, 0x32, 0x96, 0x5a, 0xd5, 0x66, 0x55, 0x3c, 0xa0, 0x4a, 0x9b,
	0x2a, 0x55, 0xca, 0xa4, 0x4e, 0x7b, 0x9e, 0x68, 0xc7, 0x06, 0x5b, 0x29, 0x52, 0x03, 0xcf, 0x96,
	0x09, 0xd7, 0x61, 0x8d, 0xfc, 0x51, 0xec, 0x3c, 0xf0, 0x45, 0xf7, 0x79, 0x66, 0x5b, 0xa1, 0x64,
	0x01, 0xf1, 0x12, 0xe5, 0xce, 0xbf, 0xfb, 0x25, 0x77, 0x3e, 0x80, 0x28, 0xc7, 0x65, 0x90, 0xe5,
	0xa9, 0x4a, 0x49, 0xdb, 0xbc, 0x63, 0x12, 0xe1, 0xf5, 0xdf, 0x53, 0x68, 0x3d, 0xe8, 0x80, 0x78,
	0xd0, 0xfa, 0x83, 0x1b, 0x49, 0x1b, 0x7d, 0xe7, 0xc6, 0x25, 0x17, 0xe0, 0x2a, 0x11, 0xa3, 0x54,
	0x3c, 0xce, 0x68, 0xb3, 0xdf, 0xb8, 0x71, 0xc8, 0x27, 0x70, 0xb9, 0x94, 0x98, 0x2b, 0x91, 0x26,
	0xd4, 0xd1, 0xa9, 0xee, 0x5d, 0x2f, 0xd8, 0x7a, 0x02, 0xe3, 0x08, 0x06, 0xdb, 0xf3, 0xd9, 0x26,
	0x43, 0xe3, 0xd0, 0x5f, 0x4b, 0x5f, 0x58, 0x91, 0x0b, 0xda, 0xd2, 0x05, 0x56, 0x2b, 0xc5, 0xef,
	0x84, 0xab, 0x22, 0x47, 0x7a, 0xaa, 0x53, 0x1e, 0xf9, 0x0a, 0xdd, 0x55, 0x11, 0xf3, 0x84, 0xe5,
	0xc8, 0x97, 0x7c, 0xb1, 0x46, 0x7a, 0xa6, 0xf3, 0x9d, 0xbb, 0x0f, 0x35, 0xf7, 0xc8, 0x40, 0xcf,
	0x25, 0x13, 0x2a, 0xae, 0x30, 0xc6, 0x44, 0x8d, 0x4e, 0xc8, 0x17, 0x70, 0x0d, 0xc9, 0x24, 0x62,
	0x42, 0xcf, 0x6d, 0x6d, 0xbf, 0x56, 0x6b, 0x1e, 0xa1, 0x3e, 0xae, 0x96, 0xfd, 0x82, 0x4b, 0x9e,
	0x65, 0x6b, 0x11, 0x71, 0xf3, 0xc3, 0x4c, 0x66, 0x18, 0x89, 0x17, 0x11, 0xd1, 0xb6, 0x35, 0xdc,
	0xd6, 0x3b, 0xdb, 0xa1, 0x61, 0x49, 0xd6, 0x64, 0x42, 0xd3, 0x4a, 0xa8, 0x0d, 0x5b, 0x62, 0xb4,
	0xe6, 0xb9, 0x45, 0xa9, 0x7b, 0x50, 0x36, 0x2e, 0xd1, 0x6f, 0x3b, 0xb2, 0x22, 0xbb, 0xba, 0x85,
	0x77, 0x87, 0x9b, 0xb5, 0xe3, 0xdb, 0x06, 0xfa, 0xa2, 0xf4, 0x44, 0xaf, 0x3e, 0xc2, 0xc5, 0x5e,
	0x77, 0x86, 0xb3, 0x23, 0x59, 0x71, 0xb9, 0x2a, 0xb9, 0x9f, 0xd0, 0x3b, 0xd6, 0xc3, 0xbe, 0xda,
	0x23, 0xef, 0xe1, 0x6d, 0x75, 0x42, 0xe6, 0x16, 0x9b, 0xd6, 0x35, 0x82, 0xde, 0xb1, 0x16, 0x08,
	0x01, 0xc8, 0x8a, 0x85, 0x2e, 0x64, 0x7a, 0xa3, 0x4a, 0xd9, 0x25, 0x78, 0xaf, 0x13, 0x7a, 0x35,
	0x5d, 0x3f, 0xc2, 0x9b, 0xff, 0x77, 0xa6, 0x0b, 0xf0, 0x34, 0x65, 0x0f, 0xd3, 0xc9, 0x64, 0xf8,
	0x34, 0xf3, 0x4f, 0x48, 0x07, 0xce, 0xc7, 0x21, 0x9b, 0x3d, 0xcf, 0x87, 0x7e, 0x43, 0xaf, 0x68,
	0x5b, 0x07, 0xdf, 0x07, 0x8f, 0xe1, 0xd0, 0x6f, 0x12, 0x1f, 0x3c, 0x1d, 0x0d, 0x26, 0xf7, 0xe3,
	0x1f, 0xf3, 0xe9, 0x3c, 0xf4, 0x9d, 0xfb, 0x4e, 0xa5, 0x87, 0xc5, 0x99, 0xdd, 0xf4, 0xcf, 0xff,
	0x02, 0x00, 0x00, 0xff, 0xff, 0x46, 0x66, 0x4e, 0xff, 0xf7, 0x02, 0x00, 0x00,
}
